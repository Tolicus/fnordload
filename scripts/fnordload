#!/usr/bin/env python

import fnordload
import time
import signal
import sys
import logging
import logging.handlers

class Fnordload(object):
    def __init__(self, LCDserver = 'localhost', eSSPport = '/dev/ttyACM0',
            inhibits = [0, 0, 0, 0, 0, 0, 0, 0], cointype = 0.5):
        self.__logger = logging.getLogger('logger')
        self.__LCD = fnordload.LCD(LCDserver)
        self._note_validator = fnordload.NoteValidator(
                device = eSSPport, inhibits = inhibits)
        self._coin_hopper = fnordload.CoinHopper(cointype)
        self._setup()

    def _setup(self):
        self.__LCD.setup()

    def _welcome(self):
        self.__LCD.welcome(self._note_validator.get_accepted_values())

    def main(self):
        while True:
            self._note_validator.set_max_accepted_value(
                    self._coin_hopper.coin_level *
                    self._coin_hopper.coin_type)
    
            self._welcome()

            try:
                amount = self._note_validator.read_note()
                self._coin_hopper.payout(amount)
            except fnordload.InvalidNoteError:
                self.__LCD.rejected_note()
                time.sleep(2)
            except fnordload.TimeoutError:
                pass

    def exit_handler(self, signal, frame):
        self._coin_hopper.reset()
        self._note_validator.exit()

        sys.exit(0)

if __name__ == "__main__":
    logger = logging.getLogger('logger')
    logger.setLevel(logging.INFO)

    logger_host = "83.133.178.69"
    logger_port = 2325

    handler = logging.handlers.SysLogHandler(address = (logger_host, logger_port), facility=19)
    logger.addHandler(handler)

    logger.info('Starting fnordload')
    
    try:
        fl = Fnordload(inhibits = [1, 1, 1, 0, 0, 0])
        signal.signal(signal.SIGINT, fl.exit_handler)

        while True:
            fl.main()
    except Exception, e:
        logger.exception(e)
        import traceback
        traceback.print_exc()
        sys.exit(1)
    
    sys.exit(0)


