#!/usr/bin/env python

import fnordload
import time
import signal
import sys
import logging
import logging.handlers
import max7301
import nupay

class Fnordload(object):
    def __init__(self, LCDserver = 'localhost', eSSPport = '/dev/ttyACM0',
            inhibits = [0, 0, 0, 0, 0, 0, 0, 0], cointype = 0.5):
        self._logger = logging.getLogger('logger')
        self._lcd = fnordload.LCD(LCDserver)
        self._io_device = max7301.MAX7301()
        self._note_validator = fnordload.NoteValidator(
                device = eSSPport, inhibits = inhibits)
        self._coin_hopper = fnordload.CoinHopper(cointype, io_device = self._io_device)
        self._ui = fnordload.UI(io_device = self._io_device, lcd = self._lcd)
        self._setup()

    def _setup(self):
        self._lcd.setup()

    def main(self):
        while True:
            try:
                choice = self._ui.choose("Fnordload Main Menu", ("Give Change", "UPAY", "Debug"))

                if choice == "Give Change":
                    self._give_change()
                elif choice == 'UPAY':
                    self._upay_menu()
                else:
                    self._not_implemented()
            except fnordload.TimeoutError:
                pass

    def _upay_menu(self):
        try:
            choice = self._ui.choose("Fnordload UPAY Menu", ("Show Balance", "Get Tokens", "Normalize Purse"))

            if choice == "Show Balance":
                self._upay_show_balance()
            else:
                self._not_implemented()
        except fnordload.TimeoutError:
            pass

    def _not_implemented(self):
        self._lcd.write("Fnordload", "", "Not Yet Implemented", "             The MGT")
        time.sleep(5)

    def _upay_show_balance(self):
        token_reader = nupay.USBTokenReader()
        t0 = time.time()

        self._lcd.write("Fnordload UPAY", "Please insert", "USB drive with", "purse file(s)")

        tokens = []
        while time.time() < t0 + 30:
            try:
                tokens = token_reader.read_tokens()
                break
            except nupay.NoTokensAvailableError:
                time.sleep(1)

        self._lcd.write("Fnordload UPAY", "Read %d tokens" % len(tokens), "", "")
        time.sleep(5)

    def _give_change(self):
        self._note_validator.set_max_accepted_value(
                self._coin_hopper.coin_level *
                self._coin_hopper.coin_type)

        accepted_values = self._note_validator.get_accepted_values()
        self._lcd.show_accepted_values(accepted_values)

        if not accepted_values:
            time.sleep(5)
            return

        try:
            amount = self._note_validator.read_note()
            self._coin_hopper.payout(amount)
        except fnordload.InvalidNoteError:
            self._lcd.rejected_note()
            time.sleep(2)
        except fnordload.TimeoutError:
            pass

    def exit_handler(self, signal, frame):
        self._coin_hopper.reset()
        self._note_validator.exit()

        sys.exit(0)

if __name__ == "__main__":
    logger = logging.getLogger('logger')
    logger.setLevel(logging.INFO)

    logger_host = "83.133.178.69"
    logger_port = 2325

    handler = logging.handlers.SysLogHandler(address = (logger_host, logger_port), facility=19)
    logger.addHandler(handler)

    logger.info('Starting fnordload')
    
    try:
        fl = Fnordload(inhibits = [1, 1, 1, 0, 0, 0])
        signal.signal(signal.SIGINT, fl.exit_handler)

        while True:
            fl.main()
    except Exception, e:
        logger.exception(e)
        import traceback
        traceback.print_exc()
        sys.exit(1)
    
    sys.exit(0)


